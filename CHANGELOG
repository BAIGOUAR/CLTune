
Version 1.6.0
- Much cleaner API due to Pimpl idiom: only cltune.h header is now required
- Replaced Khronos' cl.hpp with a custom C++11 version tailored for CLTune
- Code clean-up / reorganisation
- Added an option to add fixed defines to reference kernels
- Added an option to load a kernel from string instead of from file
- Added support for size_t OpenCL buffers

Version 1.5.1
- Improved the GEMM example to support the Intel MIC (Xeon Phi) accelerators
- Updated compiler check and compiler flags
- Adds support for multiple OpenCL kernel files at once (e.g. when wanting to include a header file)
- Adds support for the std::complex data-types
- Fixed some compilation warnings regarding size_t conversions
- Updated the FindOpenCL.cmake file

Version 1.5.0
- OpenCL local work size and memory size constraints are now automatically handled
- Greatly improved the new 2D convolution example:
  * Filter coefficients are now dynamic
  * Added support for local memory padding
  * In-lined the convolution header into the kernels and host code
  * Fixed various bugs
- Moved the examples to separate subfolders
- Uses chrono timers as seed in favor of random device
- Bugfix for simulated annealing when 2 variables can only change together.

Version 1.4.1
- Added 2D convolution as an example
- Added command-line arguments to the GEMM search-method sample
- Fixed a CUDA 7 related bug in the GEMM kernel
- Fixed a logging bug in the PSO search technique

Version 1.4.0
- Added the particle swarm optimisation (PSO) search technique
- Updated the example GEMM kernel

Version 1.3.2
- Now prints OpenCL version when running on a device
- Added install targets to CMake
- Moved header files around and renamed the main include to "cltune.h"
- Catches OpenCL exceptions and skips those configurations

Version 1.3.1
- Fixed simulated annealing's random number generation
- Added new FindOpenCL CMake script
- Added option to print database-formatted output of best results

Version 1.3.0
- Allow users to select a search strategy through the API
- Added support for the simulated annealing search method
- Added a sample using simulated annealing
- Added an option to output the search process to file

Version 1.2.0
- Added the interface to customize search algorithms
- Initially added full-search and random-search as basic search algorithms

Version 1.1.0
- User-defined parameter constraints are now fully customizable by accepting arbitrary functions on
  an arbitrary combination of parameters.
- Re-factored the code to use more C++11 features: auto, smart pointers, constexpr, class enums, ...

Version 1.0.1
- Replaced one more occurrence of a pointer with an std::shared_ptr
- Re-added OpenCL class constructor exception test
- Updated license information

Version 1.0.0
- Initial release to GitHub
